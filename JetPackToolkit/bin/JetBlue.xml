<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBlue</name>
    </assembly>
    <members>
        <member name="T:Elements.Element">
            <summary>
            The Element class.
            </summary>
        </member>
        <member name="M:Elements.Element.IsHiddenOnView(Revit.Elements.Element,Revit.Elements.Views.View)">
            <summary>
            The node returns true if element is hidden on view
            </summary>
            <param name="element">Elements for test.</param>
            <param name="view">View.</param>
            <returns>If True element hidden</returns>
            <search>
            element, hidden, on, view
            </search> 
        </member>
        <member name="M:Elements.Element.SetName(Revit.Elements.Element,System.String)">
            <summary>
            Sets new name. It may be necessary to perform inside the transaction.
            </summary>
            <param name="element">Element for renaming.</param>
            <param name="name">New name.</param>
            <returns>Renamed element</returns>
            <search>
            element, set, name, change
            </search> 
        </member>
        <member name="T:Elements.FamilyInstance">
            <summary>
            The FamilyInstance class.
            </summary>
        </member>
        <member name="M:Elements.FamilyInstance.IsFlipped(Revit.Elements.FamilyInstance)">
            <summary>
            The node returns "true" if family instance is flipped.
            </summary>
            <param name="familyInstance">Family instance for flipping test.</param>
            <returns>Is flipped</returns>
            <search>
            family, instance, test, flipped
            </search> 
        </member>
        <member name="M:Elements.FamilyInstance.ToRoom(Revit.Elements.FamilyInstance)">
            <summary>
            The "To Room" set for the door or window in the last phase of the project.
            </summary>
            <param name="familyInstance">Door or window family instance.</param>
            <returns>Room</returns>
            <search>
            to room, instance, door, window
            </search> 
        </member>
        <member name="M:Elements.FamilyInstance.FromRoom(Revit.Elements.FamilyInstance)">
            <summary>
            The "From Room" set for the door or window in the last phase of the project.
            </summary>
            <param name="familyInstance">Door or window family instance.</param>
            <returns>Room</returns>
            <search>
            from room, instance, door, window
            </search> 
        </member>
        <member name="M:Elements.FamilyInstance.ChangeType(Revit.Elements.FamilyInstance,Revit.Elements.FamilyType)">
            <summary>
            Changes the type of family instance to another. It may be necessary to perform inside the transaction body.
            </summary>
            <param name="familyInstance">Family instance for changing type.</param>
            <param name="familyType">Another family type.</param>
            <returns></returns>
            <search>
            change, type, family, instance
            </search>
        </member>
        <member name="M:Elements.FamilyInstance.SuperComponent(Revit.Elements.FamilyInstance)">
            <summary>
            Node to get the super component of current family instance.
            </summary>
            <param name="familyInstance">Family instance for getting the super component.</param>
            <returns></returns>
            <search>
            super component, family, instance
            </search>
        </member>
        <member name="T:Elements.WallType">
            <summary>
            The WallType class.
            </summary>
        </member>
        <member name="M:Elements.WallType.GetLayers(Revit.Elements.WallType)">
            <summary>
            Returns wall compound structure layers.
            </summary>
            <param name="wallType">Wall type</param>
            <returns></returns>
            <search>
            wall, compound, structure, layers
            </search>
        </member>
        <member name="M:Elements.WallType.FamilyName(Revit.Elements.WallType)">
            <summary>
            Returns wall type name. Basic, curtain or stacked wall.
            </summary>
            <param name="wallType">Wall type</param>
            <returns></returns>
            <search>
            wall, type, name
            </search>
        </member>
        <member name="T:Elements.Layer">
            <summary>
            The Wall Compound Structure Layer class.
            </summary>
        </member>
        <member name="P:Elements.Layer.Function">
            <summary>
            The function of the layer.
            </summary>
        </member>
        <member name="P:Elements.Layer.Material">
            <summary>
            Material of the layer.
            </summary>
        </member>
        <member name="P:Elements.Layer.Width">
            <summary>
            Width of the layer.
            </summary>
        </member>
        <member name="P:Elements.Layer.IsStructural">
            <summary>
            Is layer structural?
            </summary>
        </member>
        <member name="P:Elements.Layer.IsCore">
            <summary>
            Is layer core?
            </summary>
        </member>
        <member name="T:Selection.Get">
            <summary>
            The Get Selection class.
            </summary>
        </member>
        <member name="M:Selection.Get.AllElementsFromActiveSelection(System.Boolean)">
            <summary>
            The node returns all elements from active selection in Revit document.
            </summary>
            <param name="toggle">Switch for update selection.</param>
            <returns>Elements</returns>
            <search>
            elements, from, active, selection
            </search>
        </member>
        <member name="M:Selection.Get.Warnings(System.Boolean)">
            <summary>
            The node returns all Failure Messages from active Revit document.
            </summary>
            <param name="toggle">Switch for update.</param>
            <returns></returns>
            <search>
            warnings, elements, from, failure, messages
            </search>
        </member>
        <member name="M:Selection.Get.AllElementsByWorkset(Autodesk.Revit.DB.Workset)">
            <summary>
            The node returns all elements by workset.
            </summary>
            <param name="workset"></param>
            <returns>Elements</returns>
            <search>
            elements, from, workset, selection
            </search>
        </member>
        <member name="M:Selection.Get.Worksets(System.Boolean)">
            <summary>
            The node returns all worksets from active Revit document.
            </summary>
            <param name="toggle">Switch for update.</param>
            <returns></returns>
            <search>
            worksets, elements
            </search>
        </member>
        <member name="T:Selection.Set">
            <summary>
            The Set Selection class.
            </summary>
        </member>
        <member name="M:Selection.Set.Selection(Revit.Elements.Element[])">
            <summary>
            Set selection in Revit application by input elements
            </summary>
            <param name="elements">Elements for setting selection.</param>
            <returns></returns>
            <search>
            elements, set, selection
            </search>
        </member>
        <member name="T:Utilities.Elements">
            <summary>
            The Elements class.
            </summary>
        </member>
        <member name="M:Utilities.Elements.GroupByIntersection(Revit.Elements.Element[])">
            <summary>
            The node returns elements grouped by intersection
            </summary>
            <param name="elements">Elements for grouping.</param>
            <returns>Groups of elements</returns>
            <search>
            elements, groups, intersection
            </search> 
        </member>
        <member name="M:Utilities.Elements.FilterBySolidIntersection(Revit.Elements.Element[],Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            A filter to find elements that intersect the given solid geometry.
            The input solid used for this filter can be obtained from an existing element.
            </summary>
            <param name="elements"></param>
            <param name="solid">Input solid</param>
            <returns>Finded elements</returns>
            <search>
            filter, find, elements, intersect, solid, geometry
            </search> 
        </member>
        <member name="M:Utilities.Elements.FilterByElementIntersection(Revit.Elements.Element[],Revit.Elements.Element)">
            <summary>
            A filter to find elements that intersect the given element.
            </summary>
            <param name="elements"></param>
            <param name="element"></param>
            <returns>Finded elements</returns>
            <search>
            filter, find, elements, intersect, element
            </search> 
        </member>
        <member name="M:Utilities.Elements.Delete(Revit.Elements.Element[])">
            <summary>
            Delete elements from the document with their dependencies
            </summary>
            <param name="elements">List of elements for deleting.</param>
            <returns></returns>
            <search>
            delete, elements.
            </search> 
        </member>
        <member name="T:Utilities.Room">
            <summary>
            The FamilyInstance class.
            </summary>
        </member>
        <member name="M:Utilities.Room.Doors(Revit.Elements.Room)">
            <summary>
            </summary>
            <param name="room"></param>
            <returns></returns>
            <search>
            room
            </search> 
        </member>
    </members>
</doc>
